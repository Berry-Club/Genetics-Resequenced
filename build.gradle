import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.11'

    id 'org.jetbrains.kotlin.jvm' version '2.0.0'
}

version = mod_version
group = mod_group_id
base.archivesName = "${mod_id}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileKotlin.compilerOptions.jvmTarget = JvmTarget.JVM_21

neoForge {

    version = neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    validateAccessTransformers = true
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    // NeoForged MDK includes mavenLocal by default
    mavenLocal()
    // REQUIRED for using Kotlin for Forge
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }

    // For Curios
    maven {
        name = "OctoStudios"
        url = uri("https://maven.octo-studios.com/releases")
    }

    //For REI
    repositories {
        maven { url "https://maven.shedaniel.me" }
    }

    // For Modonomicon
    maven {
        url "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
        content {
            includeGroup "com.klikli_dev"
        }
    }

    //Cursemaven
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }

    // For EMI
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    // For KubeJS
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    // For Mekanism
    maven {
        url "https://modmaven.dev/"
        content {
            includeGroup "mekanism"
        }
    }

}

dependencies {
    // Must use the '-neoforge' version on NeoForge. If on regular forge, omit the '-neoforge'
    implementation 'thedarkcolour:kotlinforforge-neoforge:5.4.0'

    // Curios
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"

    // Modonomicon
    implementation ("com.klikli_dev:modonomicon-1.21.1-neoforge:${modonomicon_version}"){transitive=false}

    // EMI
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    runtimeOnly "dev.emi:emi-neoforge:${emi_version}"

    // JEI
    compileOnly "curse.maven:jei-238222:5532144"

    // Mekanism
    runtimeOnly "mekanism:Mekanism:${mekanism_version}"

    // Artifacts
    runtimeOnly "curse.maven:artifacts-312353:5624722"
    runtimeOnly "curse.maven:architectury-api-419699:5553800"
    runtimeOnly "curse.maven:cloth-config-348521:5623420"

    // KubeJs
    runtimeOnly "dev.latvian.mods:kubejs-neoforge:${kubejs_version}"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
