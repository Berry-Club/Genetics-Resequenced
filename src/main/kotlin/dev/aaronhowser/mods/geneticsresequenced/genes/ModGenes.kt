package dev.aaronhowser.mods.geneticsresequenced.genes

import dev.aaronhowser.mods.geneticsresequenced.api.capability.genes.Gene
import dev.aaronhowser.mods.geneticsresequenced.api.capability.genes.GeneBuilder
import dev.aaronhowser.mods.geneticsresequenced.util.OtherUtil
import net.minecraft.world.effect.MobEffects

@Suppress("unused", "MemberVisibilityCanBePrivate")
object ModGenes {

    fun registerDefaultGenes() {
        // Doesn't do anything, but it loads the object which initializes the genes
    }

    private fun builder(geneId: String): GeneBuilder =
        GeneBuilder(OtherUtil.modResource(geneId))

    val basic: Gene = builder("basic")
        .setDnaPointsRequired(0)
        .removePlasmid()
        .build()

    // Mutations (must be initialized first because they're used in arguments in ones below)

    val clawsTwo: Gene = builder("claws_2")
        .setDnaPointsRequired(50)
        .allowMobs()
        .build()
    val efficiencyFour: Gene = builder("efficiency_4")
        .setDnaPointsRequired(50)
        .build()
    val flight: Gene = builder("flight")
        .setDnaPointsRequired(50)
        .build()
    val hasteTwo: Gene = builder("haste_2")
        .setDnaPointsRequired(50)
        .setPotion(MobEffects.DIG_SPEED, 2)
        .build()
    val meatyTwo: Gene = builder("meaty_2")
        .setDnaPointsRequired(50)
        .allowMobs()
        .build()
    val moreHeartsTwo: Gene = builder("more_hearts_2")
        .setDnaPointsRequired(50)
        .allowMobs()
        .build()
    val photosynthesis: Gene = builder("photosynthesis")
        .setDnaPointsRequired(40)
        .build()
    val regenerationFour: Gene = builder("regeneration_4")
        .setDnaPointsRequired(50)
        .setPotion(MobEffects.REGENERATION, 4)
        .build()
    val resistanceTwo: Gene = builder("resistance_2")
        .setDnaPointsRequired(50)
        .setPotion(MobEffects.DAMAGE_RESISTANCE, 2)
        .build()
    val speedFour: Gene = builder("speed_4")
        .setDnaPointsRequired(50)
        .setPotion(MobEffects.MOVEMENT_SPEED, 4)
        .build()
    val speedTwo: Gene = builder("speed_2")
        .setDnaPointsRequired(50)
        .setPotion(MobEffects.MOVEMENT_SPEED, 2)
        .setMutatesInto(speedFour)
        .build()
    val strengthTwo: Gene = builder("strength_2")
        .setDnaPointsRequired(50)
        .setPotion(MobEffects.DAMAGE_BOOST, 2)
        .build()
    val scareZombies: Gene = builder("scare_zombies")
        .setDnaPointsRequired(50)
        .build()
    val scareSpiders: Gene = builder("scare_spiders")
        .setDnaPointsRequired(50)
        .build()

    //Standard list
    val bioluminescence: Gene = builder("bioluminescence")
        .allowMobs()
        .setDnaPointsRequired(16)
        .build()
    val chatterbox: Gene = builder("chatterbox")
        .setDnaPointsRequired(20)
        .build()
    val chilling: Gene = builder("chilling")
        .setDnaPointsRequired(20)
        .allowMobs()
        .build()
    val claws: Gene = builder("claws")
        .setDnaPointsRequired(20)
        .allowMobs()
        .setMutatesInto(clawsTwo)
        .build()
    val dragonsBreath: Gene = builder("dragons_breath")
        .setDnaPointsRequired(20)
        .build()
    val eatGrass: Gene = builder("eat_grass")
        .setDnaPointsRequired(16)
        .build()
    val efficiency: Gene = builder("efficiency")
        .setDnaPointsRequired(30)
        .setMutatesInto(efficiencyFour)
        .build()
    val emeraldHeart: Gene = builder("emerald_heart")
        .setDnaPointsRequired(30)
        .allowMobs()
        .build()
    val enderDragonHealth: Gene = builder("ender_dragon_health")
        .setDnaPointsRequired(60)
        .build()
    val explosiveExit: Gene = builder("explosive_exit")
        .setDnaPointsRequired(20)
        .allowMobs()
        .build()
    val fireProof: Gene = builder("fire_proof")
        .setDnaPointsRequired(24)
        .allowMobs()
        .build()
    val haste: Gene = builder("haste")
        .setDnaPointsRequired(30)
        .setPotion(MobEffects.DIG_SPEED, 1)
        .setMutatesInto(hasteTwo)
        .build()
    val infinity: Gene = builder("infinity")
        .setDnaPointsRequired(30)
        .build()
    val invisible: Gene = builder("invisible")
        .setDnaPointsRequired(50)
        .allowMobs()
        .setPotion(MobEffects.INVISIBILITY, 1)
        .build()
    val itemMagnet: Gene = builder("item_magnet")
        .setDnaPointsRequired(30)
        .build()
    val jumpBoost: Gene = builder("jump_boost")
        .setDnaPointsRequired(10)
        .allowMobs()
        .setPotion(MobEffects.JUMP, 1)
        .setMutatesInto(flight)
        .build()
    val johnny: Gene = builder("johnny")
        .setDnaPointsRequired(20)
        .allowMobs()
        .build()
    val keepInventory: Gene = builder("keep_inventory")
        .setDnaPointsRequired(40)
        .build()
    val knockback: Gene = builder("knockback")
        .setDnaPointsRequired(20)
        .allowMobs()
        .build()
    val layEgg: Gene = builder("lay_egg")
        .setDnaPointsRequired(12)
        .allowMobs()
        .build()
    val luck: Gene = builder("luck")
        .setDnaPointsRequired(50)
        .allowMobs()
        .setPotion(MobEffects.LUCK, 1)
        .build()
    val meaty: Gene = builder("meaty")
        .setDnaPointsRequired(12)
        .allowMobs()
        .setMutatesInto(meatyTwo)
        .build()
    val milky: Gene = builder("milky")
        .setDnaPointsRequired(12)
        .allowMobs()
        .build()
    val mobSight: Gene = builder("mob_sight")
        .setDnaPointsRequired(16)
        .build()
    val moreHearts: Gene = builder("more_hearts")
        .setDnaPointsRequired(40)
        .allowMobs()
        .setMutatesInto(moreHeartsTwo)
        .build()
    val nightVision: Gene = builder("night_vision")
        .setDnaPointsRequired(16)
        .setPotion(MobEffects.NIGHT_VISION, 1)
        .build()
    val noFallDamage: Gene = builder("no_fall_damage")
        .setDnaPointsRequired(30)
        .allowMobs()
        .build()
    val noHunger: Gene = builder("no_hunger")
        .setDnaPointsRequired(30)
        .build()
    val poisonImmunity: Gene = builder("poison_immunity")
        .setDnaPointsRequired(24)
        .allowMobs()
        .build()
    val regeneration: Gene = builder("regeneration")
        .setDnaPointsRequired(60)
        .allowMobs()
        .setPotion(MobEffects.REGENERATION, 1)
        .setMutatesInto(regenerationFour)
        .build()
    val resistance: Gene = builder("resistance")
        .setDnaPointsRequired(30)
        .allowMobs()
        .setPotion(MobEffects.DAMAGE_RESISTANCE, 1)
        .setMutatesInto(resistanceTwo)
        .build()
    val scareCreepers: Gene = builder("scare_creepers")
        .setDnaPointsRequired(20)
        .setMutatesInto(scareZombies)
        .build()
    val scareSkeletons: Gene = builder("scare_skeletons")
        .setDnaPointsRequired(20)
        .setMutatesInto(scareSpiders)
        .build()
    val shootFireballs: Gene = builder("shoot_fireballs")
        .setDnaPointsRequired(24)
        .build()
    val slimyDeath: Gene = builder("slimy_death")
        .setDnaPointsRequired(60)
        .build()
    val speed: Gene = builder("speed")
        .setDnaPointsRequired(20)
        .allowMobs()
        .setPotion(MobEffects.MOVEMENT_SPEED, 1)
        .setMutatesInto(speedTwo)
        .build()
    val stepAssist: Gene = builder("step_assist")
        .setDnaPointsRequired(10)
        .build()
    val strength: Gene = builder("strength")
        .setDnaPointsRequired(20)
        .allowMobs()
        .setPotion(MobEffects.DAMAGE_BOOST, 1)
        .setMutatesInto(strengthTwo)
        .build()
    val teleport: Gene = builder("teleport")
        .setDnaPointsRequired(24)
        .setMutatesInto(flight)
        .build()
    val thorns: Gene = builder("thorns")
        .setDnaPointsRequired(12)
        .allowMobs()
        .setMutatesInto(photosynthesis)
        .build()
    val wallClimbing: Gene = builder("wall_climbing")
        .setDnaPointsRequired(40)
        .build()
    val waterBreathing: Gene = builder("water_breathing")
        .setDnaPointsRequired(16)
        .allowMobs()
        .build()
    val witherHit: Gene = builder("wither_hit")
        .setDnaPointsRequired(20)
        .allowMobs()
        .build()
    val witherProof: Gene = builder("wither_proof")
        .setDnaPointsRequired(40)
        .allowMobs()
        .build()
    val wooly: Gene = builder("wooly")
        .setDnaPointsRequired(12)
        .allowMobs()
        .build()
    val xpMagnet: Gene = builder("xp_magnet")
        .setDnaPointsRequired(30)
        .build()

    //Negative effects
    val badOmen: Gene = builder("bad_omen")
        .setDnaPointsRequired(20)
        .setNegative()
        .setPotion(MobEffects.BAD_OMEN, 1)
        .allowMobs()
        .build()
    val blindness: Gene = builder("blindness")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.BLINDNESS, 1)
        .allowMobs()
        .setNegative()
        .build()
    val cringe: Gene = builder("cringe")
        .setDnaPointsRequired(20)
        .setNegative()
        .build()
    val cursed: Gene = builder("cursed")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.UNLUCK, 1)
        .allowMobs()
        .setNegative()
        .build()
    val flambe: Gene = builder("flambe")
        .setDnaPointsRequired(1)
        .setNegative()
        .allowMobs()
        .build()
    val hunger: Gene = builder("hunger")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.HUNGER, 1)
        .setNegative()
        .allowMobs()
        .build()
    val levitation: Gene = builder("levitation")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.LEVITATION, 1)
        .allowMobs()
        .setNegative()
        .build()
    val miningFatigue: Gene = builder("mining_fatigue")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.DIG_SLOWDOWN, 1)
        .allowMobs()
        .setNegative()
        .build()
    val nausea: Gene = builder("nausea")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.CONFUSION, 1)
        .allowMobs()
        .setNegative()
        .build()
    val poison: Gene = builder("poison")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.POISON, 1)
        .allowMobs()
        .setNegative()
        .build()
    val poisonFour: Gene = builder("poison_4")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.POISON, 4)
        .allowMobs()
        .setNegative()
        .build()
    val slowness: Gene = builder("slowness")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.MOVEMENT_SLOWDOWN, 1)
        .allowMobs()
        .setNegative()
        .build()
    val slownessFour: Gene = builder("slowness_4")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.MOVEMENT_SLOWDOWN, 4)
        .allowMobs()
        .setNegative()
        .build()
    val slownessSix: Gene = builder("slowness_6")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.MOVEMENT_SLOWDOWN, 6)
        .allowMobs()
        .setNegative()
        .build()
    val weakness: Gene = builder("weakness")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.WEAKNESS, 1)
        .allowMobs()
        .setNegative()
        .build()
    val wither: Gene = builder("wither")
        .setDnaPointsRequired(1)
        .setPotion(MobEffects.WITHER, 1)
        .allowMobs()
        .setNegative()
        .build()

    val blackDeath: Gene = builder("black_death")
        .setDnaPointsRequired(1)
        .setNegative()
        .allowMobs()
        .build()
    val greenDeath: Gene = builder("green_death")
        .setDnaPointsRequired(1)
        .setNegative()
        .allowMobs()
        .build()
    val whiteDeath: Gene = builder("white_death")
        .setDnaPointsRequired(1)
        .setNegative()
        .allowMobs()
        .build()
    val grayDeath: Gene = builder("gray_death")
        .setDnaPointsRequired(1)
        .setNegative()
        .allowMobs()
        .build()
    val unUndeath: Gene = builder("un_undeath")
        .setDnaPointsRequired(1)
        .setNegative()
        .allowMobs()
        .build()

}